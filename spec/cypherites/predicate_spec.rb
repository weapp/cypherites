require 'spec_helper'

module Cypherites
  describe Predicate do

    describe ".new" do
      it "simple predicate is set" do
        p = Predicate.new("predicate")
        expect(p.predicate).to be == "predicate"
      end
    end

    describe "#generate" do
      subject{ Predicate.new("predicate ?") }

      it { expect{subject.generate}.to raise_error ArgumentError }

      it { expect(subject.generate(0)).to be == "predicate 0" }

      it { expect(subject.generate("string")).to be == "predicate 'string'" }

      it { expect(subject.generate({key: "value"})).to be == "predicate {key : 'value'}" }
    end


    describe ".build" do
      it "must call 'new'" do
        expect(Predicate).to receive(:new) { double("predicate", generate: true) }
        Predicate.build("predicate")
      end

      it "must call 'generate'" do
        expect_any_instance_of(Predicate).to receive(:generate) { nil }
        Predicate.build("predicate")
      end

      it "must create and generate a predicate" do
        expect(Predicate.build("predicate <?>", "args", as: "wadus")).to be == "predicate <'args'> AS wadus"
      end

      it "must create and generate a predicate" do
        expect(Predicate.build("predicate <?>", "args")).to be == "predicate <'args'>"
      end

      it "string simple predicate is generated" do
        expect(Predicate.build("predicate")).to be == "predicate"
      end

      it "string predicate with number is generated" do
        expect(Predicate.build(0)).to be == "0"
      end

      it "symbol predicate is generated" do
        expect(Predicate.build(:sym)).to be == "sym"
      end

      context "or predicates" do
        it { expect(Predicate.build(or: ["p1", "p2"])).to be == "((p1) OR (p2))" }

        it "or predicated is the sum of his components" do
          params1 = ["p1 ?", "args"]
          params2 = ["p2 <?> <?>", "arg1", "arg2"]

          # predicated generated by builder
          build_combined = Predicate.build(or: [params1, params2])

          # predicated combined by hand
          build1 = Predicate.build(*params1)
          build2 = Predicate.build(*params2)
          handy_combined = "((#{build1}) OR (#{build2}))"

          expect(build_combined).to be == handy_combined
        end
      end

      context ".build with special chars in predicates" do
        it { expect(Predicate.build('\?')).to eq "?" }

        it { expect(Predicate.build('a \? a')).to eq "a ? a" }

        it { expect(Predicate.build('?', 3)).to eq "3" }

        it { expect(Predicate.build('a ? a', 3)).to eq "a 3 a" }

        it { expect(Predicate.build('%')).to eq "%" }

        it { expect(Predicate.build('%%')).to eq "%%" }

        it { expect(Predicate.build('%s')).to eq "%s" }

        it { expect(Predicate.build('1%s')).to eq "1%s" }
      end
    end

  end
end